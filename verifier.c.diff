--- ./linux-6.13.2/kernel/bpf/verifier.c.bck	2025-02-13 22:29:34.827564753 +0900
+++ ./linux-6.13.2/kernel/bpf/verifier.c	2025-02-14 11:17:41.716224919 +0900
@@ -14236,6 +14236,40 @@
 	__update_reg_bounds(dst_reg);
 }
 
+static void scalar32_min_max_neg(struct bpf_reg_state *reg)
+{
+	s32 smin_val = reg->s32_min_value;
+	s32 smax_val = reg->s32_max_value;
+	u32 umin_val = reg->u32_min_value;
+	u32 umax_val = reg->u32_max_value;
+
+	if(smin_val == S32_MIN && smax_val == S32_MAX &&
+	   umin_val == 0 && umax_val == U32_MAX)
+		return;
+
+	reg->s32_min_value = min_t(s32, -smax_val, -smin_val);
+	reg->s32_max_value = max_t(s32, -smax_val, -smin_val);
+	reg->u32_min_value = min_t(u32, -umax_val, -umin_val);
+	reg->u32_max_value = max_t(u32, -umax_val, -umin_val);
+}
+
+static void scalar_min_max_neg(struct bpf_reg_state *reg)
+{
+	s64 smin_val = reg->smin_value;
+	s64 smax_val = reg->smax_value;
+	u64 umin_val = reg->umin_value;
+	u64 umax_val = reg->umax_value;
+
+	if(smin_val == S64_MIN && smax_val == S64_MAX &&
+	   umin_val == 0 && umax_val == U64_MAX)
+		return;
+
+	reg->smin_value = min_t(s64, -smax_val, -smin_val);
+	reg->smax_value = max_t(s64, -smax_val, -smin_val);
+	reg->umin_value = min(-umax_val, -umin_val);
+	reg->umax_value = max(-umax_val, -umin_val);
+}
+
 static bool is_safe_to_compute_dst_reg_range(struct bpf_insn *insn,
 					     const struct bpf_reg_state *src_reg)
 {
@@ -14261,6 +14295,7 @@
 	case BPF_XOR:
 	case BPF_OR:
 	case BPF_MUL:
+	case BPF_NEG:
 		return true;
 
 	/* Shift operators range is only computable if shift dimension operand
@@ -14363,6 +14398,11 @@
 		else
 			scalar_min_max_arsh(dst_reg, &src_reg);
 		break;
+	case BPF_NEG:
+		scalar32_min_max_neg(dst_reg);
+		scalar_min_max_neg(dst_reg);
+		dst_reg->var_off = tnum_sub(tnum_const(0), dst_reg->var_off);
+		break;
 	default:
 		break;
 	}
@@ -14518,22 +14558,13 @@
 	u8 opcode = BPF_OP(insn->code);
 	int err;
 
-	if (opcode == BPF_END || opcode == BPF_NEG) {
-		if (opcode == BPF_NEG) {
-			if (BPF_SRC(insn->code) != BPF_K ||
-			    insn->src_reg != BPF_REG_0 ||
-			    insn->off != 0 || insn->imm != 0) {
-				verbose(env, "BPF_NEG uses reserved fields\n");
-				return -EINVAL;
-			}
-		} else {
-			if (insn->src_reg != BPF_REG_0 || insn->off != 0 ||
-			    (insn->imm != 16 && insn->imm != 32 && insn->imm != 64) ||
-			    (BPF_CLASS(insn->code) == BPF_ALU64 &&
-			     BPF_SRC(insn->code) != BPF_TO_LE)) {
-				verbose(env, "BPF_END uses reserved fields\n");
-				return -EINVAL;
-			}
+	if (opcode == BPF_END) {
+		if (insn->src_reg != BPF_REG_0 || insn->off != 0 ||
+			(insn->imm != 16 && insn->imm != 32 && insn->imm != 64) ||
+			(BPF_CLASS(insn->code) == BPF_ALU64 &&
+			 BPF_SRC(insn->code) != BPF_TO_LE)) {
+			verbose(env, "BPF_END uses reserved fields\n");
+			return -EINVAL;
 		}
 
 		/* check src operand */
